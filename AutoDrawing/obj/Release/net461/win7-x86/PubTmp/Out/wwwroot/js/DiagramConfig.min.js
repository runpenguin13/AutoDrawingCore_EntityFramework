function initialize() { var t = $("#MenuBar"), e = t.find("ol.breadcrumb"), a = $("<li>", { class: "breadcrumb-item" }); e.append(a); var r = $("<a>", { href: "/DrawingOrders/List", text: "Drawings" }); a.append(r), a = $("<li>", { class: "breadcrumb-item" }), e.append(a), r = $("<a>", { href: "/drawings/orders/" + orderId + "/Edit", text: depth }), a.append(r), a = $("<li>", { class: "breadcrumb-item active", text: model }), e.append(a); var n = t.find("div.btn-group"), i = $("<div>", { class: "btn-group mr-2" }); n.before(i); var o = $("<a>", { class: "btn text-white", text: "Component", href: "/drawings/orders/" + orderId + "/equipments/" + dwgEquipId + "/Edit" }); if (i.append(o), isEmpty(wordmapId)) (s = $("<button>", { type: "button", class: "btn btn-light-green", text: "Diagram" })).css("cursor:not-allowed"), s.prop("disabled", !0), i.append(c); else { var s = $("<a>", { class: "btn text-white font-weight-bold", text: "Diagram", href: "/drawings/orders/" + orderId + "/equipments/" + dwgEquipId + "/diagram/" + wordmapId + "/row/0" }); i.append(s) } var p = $("<a>", { class: "btn text-white", text: "View", href: "/drawings/orders/" + orderId + "/equipments/" + dwgEquipId + "/fileview" }); i.append(p); var l = $("<div>", { class: "btn-group mr-2" }); i.before(l); var c = $("<button>", { class: "btn btn-light", id: "reload", title: "Refresh", value: "새로고침" }); l.append(c); var d = $("<i>", { class: "fas fa-sync-alt", "aria-hidden": !0 }); c.append(d), c = $("<button>", { class: "btn btn-light", id: "update", title: "Save to drawing", value: "저장하기" }), l.append(c), d = $("<i>", { class: "far fa-save", "aria-hidden": !0 }), c.append(d), c = $("<button>", { class: "btn btn-light", id: "import", title: "Import from equipment", value: "가져오기" }), l.append(c), d = $("<i>", { class: "fa fa-download", "aria-hidden": !0 }), c.append(d), c = $("<button>", { class: "btn btn-light", id: "export", title: "Export to equipment", value: "내보내기" }), l.append(c), d = $("<i>", { class: "fa fa-upload", "aria-hidden": !0 }), c.append(d); var u = $("<div>", { class: "btn-group mr-2" }); l.before(u), c = $("<button>", { class: "btn btn-light", id: "expand", "data-diagram-transform": "expand" }), u.append(c), d = $("<i>", { class: "fas fa-expand", "aria-hidden": !0 }), c.append(d), c = $("<button>", { class: "btn btn-light", id: "rotate-left", "data-diagram-transform": "rotate(-90)" }), u.append(c), d = $("<i>", { class: "fas fa-undo-alt", "aria-hidden": !0 }), c.append(d), c = $("<button>", { class: "btn btn-light", id: "rotate-right", "data-diagram-transform": "rotate(90)" }), u.append(c), d = $("<i>", { class: "fas fa-redo-alt", "aria-hidden": !0 }), c.append(d); var h = $("<div>", { class: "btn-group mr-2" }); u.before(h); var f = $("<select>", { class: "form-control" }); h.append(f), $.each(items, function () { var t = $("<option>", { value: this.Value, text: this.Text }); f.append(t) }), f.on("change", function () { window.location.href = $(this).val() }) } function Embed_diagram(t) { svgtag = t.documentElement, viewBox = svgtag.getAttribute("viewBox"), svgtag.removeAttribute("viewBox"), $(t).find("svg").attr("width", "100%"), $(t).find("svg").attr("height", "100%"), $(t).find("svg > g").attr("id", "viewport"), extend(jQuery), $("#diagram-content").panzoom({ svg: svgtag, viewBox: viewBox }).removeClass("appear") } function Register_toolbox_event() { $("[data-diagram-transform]").on("click", function () { var t = $(this).data("diagram-transform"); "expand" === t ? $("#diagram-content").panzoom({ svg: svgtag, viewBox: viewBox }) : $("svg > g").attr("transform", $("svg > g").attr("transform") + " " + t) }) } function LoadDiagram() { $.getJSON("/DrawingOrders/LoadDiagram", { dwgEquipId: dwgEquipId, wordmapId: wordmapId }).done(function (t) { var e = t.Msg; "Success" === e ? (construct_form(t), $.getJSON(url, form_load)) : (alert(e), "Not Found Service Item" === e && $(location).attr("href", "/drawings/orders/" + data.drawingId + "/Edit")) }).fail(function (t, e, a) { toastr.error("Load component", "Error", { positionClass: "toast-bottom-right" }) }) } function construct_form(t) { var e = $("svg > g > layer"); $("svg > g > g").on("click", function (t) { var e = $(t.currentTarget).attr("v:layerMember"), a = $('#panel-layers input[type="checkbox"]').filter(function () { return this.getAttribute("data-index") === String(e) }), r = a.parent().parent().parent(), n = $("#ShapePopup"), i = n.find(".card-header"), o = n.find(".card-body"); i.empty(), o.empty(); var s = $("<span>", { text: r.children("span").text() }); i.append(s); var p = $("<div>", { style: "display:inline-block;", class: "float-right" }); i.append(p); var l = $("<span>", { class: "switch" }); p.append(l); var c = $("<input>", { type: "checkbox", "data-index": a.attr("data-index"), class: "switch", id: "popupSwitch" }); c.prop("checked", a.prop("checked")), l.append(c); var d = $("<label>", { for: "popupSwitch", class: "ml-2" }); l.append(d), c.on("change", function () { $(this).attr("data-index"); $('#panel-layers input[type="checkbox"]').filter(function () { return this.getAttribute("data-index") === String(e) }).prop("checked", $(this).prop("checked")).trigger("change") }); var u = r.siblings(".card-body").children().clone(!0).appendTo(o); $.each(u, function () { var t = $(this).find('input[type="text"]'); t.unbind("input"), t.bind("input", function () { var t = $(this).attr("data-layer"), e = $(this).val(), a = $("#ShapePopup").find('input[type="checkbox"]').attr("data-index"), r = $('#panel-layers input[type="checkbox"]').filter(function () { return this.getAttribute("data-index") === String(a) }).parent().parent().parent().siblings().find('input[type="text"]').filter(function () { return this.getAttribute("data-layer") === String(t) }); isEmpty(r) || (r.val(e), r.trigger("input")) }) }); var h = t.clientX, f = t.clientY; n.css("left", h), n.css("top", f), n.show(), $("#ShapeOverlay").show() }), $.each(e, function () { var t = $(this).attr("v:index"), e = $(this).attr("v:name"), a = $("svg > g g").filter(function () { return this.getAttribute("v:layerMember") === String(t) }); $.each(a, function () { var t = $(this).children("title"); $(this).attr("v:shapeName", t.text()), t.text("[" + e + "] " + t.text()), $(this).hide() }) }); for (var a = 0; a < 3; a++) { construct_table(0 === a ? $("#panel-interfaces") : 1 === a ? $("#panel-components") : $("#panel-properties"), 0 === a ? t.Interface : 1 === a ? t.Component : t.Property) } $("td.collapse-column").click(function () { var t = $(this).find("i"); "collapse" === $(this).parent().next().attr("class") ? (t.attr("class", "fas fa-caret-up"), $(this).attr("rowspan", "2"), $(this).parent().next().attr("class", "collapse show")) : "collapse show" === $(this).parent().next().attr("class") && (t.attr("class", "fas fa-caret-down"), $(this).parent().find("td:first").removeAttr("rowspan"), $(this).parent().next().attr("class", "collapse")) }) } function construct_table(t, e) { $.each(e, function (e, a) { var r = $("svg > g > layer").filter(function () { return $(this).attr("v:name") === a.Layer }), n = $("<span>", { class: "switch" }), i = $("<input>", { type: "checkbox", "data-layer": a.Layer, "data-index": $(r).attr("v:index"), class: "switch", id: "switch" + $(r).attr("v:index"), "re-with": "", "re-reverse": "", "re-off": "" }), o = a.Relation; if (!isEmpty(o)) { var s = i.attr("re-with"), p = i.attr("re-reverse"), l = i.attr("re-off"); $.each(o, function () { var t = this.ReLayerValue, e = this.ReLayerName; "WITH" === t ? i.attr("re-with", s + e) : "REVERSE" === t ? i.attr("re-reverse", p + e) : "OFF" === t && i.attr("re-off", l + e) }) } n.append(i); var c = $("<label>", { for: "switch" + $(r).attr("v:index") }); n.append(c), i.on("change", function (t) { var e = $(t.target).data("index"); setShapeVisible(e, isLayerVisible(e)); var a, r, n, i = $(this).attr("re-with"), o = $(this).attr("re-reverse"), s = $(this).attr("re-off"); if (!isEmpty(i)) { i.split(","); $.each(p, function () { $('input[data-layer="' + this + '"]').prop("checked", $(t).prop("checked")).trigger("change") }) } if (!isEmpty(o)) { o.split(","); $.each(p, function () { $('input[data-layer="' + this + '"]').prop("checked", !$(t).prop("checked")).trigger("change") }) } if (!isEmpty(s)) { var p = s.split(","); a = p, r = "off", n = t, $.each(a, function () { var t = $('input[data-layer="' + this + '"]'), e = t.data("index"); "with" === r ? (t.prop("checked", n.prop("checked")), setShapeVisible(e, n.prop("checked"))) : "reverse" === r ? (t.prop("checked", !n.prop("checked")), setShapeVisible(e, !n.prop("checked"))) : "off" === r && (t.prop("checked", !1), setShapeVisible(e, !1)) }) } }); var d = $("<div>", { class: "card" }); t.append(d); var u = $("<div>", { class: "card-header p-1 pl-3 cursor-pointer" }); d.append(u), u.on("click", function (t) { if (!$(t.target).parent().hasClass("switch")) { var e = $(t.currentTarget).siblings(); "none" === e.css("display") ? e.show() : e.hide(); var a = $(t.currentTarget).find("i"); a.hasClass("fa-caret-down") ? (a.removeClass("fa-caret-down"), a.addClass("fa-caret-up")) : (a.removeClass("fa-caret-up"), a.addClass("fa-caret-down")) } }); var h = $("<i>", { class: "fas fa-caret-down mr-2" }); u.append(h); var f = $("<span>", { text: a.Title }); u.append(f); var g = $("<div>", { style: "display:inline-block;", class: "float-right" }); u.append(g), g.append(n); var v = $("<div>", { class: "card-body pt-2 pb-2" }); d.append(v), v.hide(), void 0 !== a.Notation && construct_notations_table(v, a.Notation) }) } function construct_notations_table(t, e) { $.each(e, function (e, a) { var r = $("<div>", { class: "row" }); t.append(r); var n = $("<label>", { class: "col-3 col-form-label", text: a.Title }); r.append(n); var i = $("<div>", { class: "col" }); r.append(i); var o = $("<input>", { type: "text", "data-type": "notation", "data-layer": a.Layer, value: a.Value, style: "width:100%;", class: "form-control" }); o.on("input", function () { SetShapeText(a.Layer, $(this).val()) }), o.on("click", function () { var t = $(this).data("layer"); $("svg > g g").filter(function () { return $(this).attr("v:shapeName") === t }).children("rect").attr("data-select", !0) }), o.on("focusout", function () { var t = $(this).data("layer"); $("svg > g g").filter(function () { return $(this).attr("v:shapeName") === t }).children("rect").attr("data-select", !1) }), i.append(o) }) } function setShapeVisible(t, e) { var a = $("svg > g g").filter(function () { return this.getAttribute("v:layerMember") === String(t) }); a && $.each(a, function (t, a) { e ? $(a).attr("style", 'display:""') : $(a).attr("style", "display:none") }) } function form_load(t) { 0 === t.xServiceItem ? (alert("삭제된 Equipment입니다. Equipment page로 이동합니다."), $(location).attr("href", "/drawings/orders/" + t.drawingId + "/Edit")) : (loading.show(), equipment = t, $.each(equipment.properties, function (t, e) { var a = $('#panel-layers input[type="checkbox"][data-layer="' + e.layer + '"]'); "TRUE" === e.value && a.prop("checked", !0), showLayer(e.layer, "TRUE" === e.value), $.each(e.notations, function (t, e) { $('#panel-layers input[type="text"][data-layer="' + e.layer + '"]').val(e.value), SetShapeText(e.layer, e.value) }) }), $.each(equipment.interfaces, function (t, e) { var a = $('#panel-layers input[type="checkbox"][data-layer="' + e.layer + '"]'); "TRUE" === e.value && a.prop("checked", !0), showLayer(e.layer, "TRUE" === e.value), $.each(e.notations, function (t, e) { $('#panel-layers input[type="text"][data-layer="' + e.layer + '"]').val(e.value), SetShapeText(e.layer, e.value) }) }), $.each(equipment.components, function (t, e) { var a = $('#panel-layers input[type="checkbox"][data-layer="' + e.layer + '"]'); "TRUE" === e.value && a.prop("checked", !0), showLayer(e.layer, "TRUE" === e.value), $.each(e.notations, function (t, e) { $('#panel-layers input[type="text"][data-layer="' + e.layer + '"]').val(e.value), SetShapeText(e.layer, e.value) }) }), loading.hide()) } function extend(t) { t.fn.extend({ panzoom: function (t) { return this.each(function () { PanZoom(this, t) }) } }) } function form_save() { $.each(equipment.properties, function (t, e) { e.value = $('#panel-layers input[type="checkbox"][data-layer="' + e.layer + '"]').prop("checked"), $.each(e.notations, function (t, e) { e.value = $('#panel-layers input[type="text"][data-layer="' + e.layer + '"]').val() }) }), $.each(equipment.interfaces, function (t, e) { e.value = $('#panel-layers input[type="checkbox"][data-layer="' + e.layer + '"]').prop("checked"), $.each(e.notations, function (t, e) { e.value = $('#panel-layers input[type="text"][data-layer="' + e.layer + '"]').val() }) }), $.each(equipment.components, function (t, e) { e.value = $('#panel-layers input[type="checkbox"][data-layer="' + e.layer + '"]').prop("checked"), $.each(e.notations, function (t, e) { e.value = $('#panel-layers input[type="text"][data-layer="' + e.layer + '"]').val() }) }) } function SetShapeText(t, e) { var a = $("svg > g g").filter(function () { return $(this).attr("v:shapeName") === t }); a.find("desc").remove(), a.find("v:textBlock").remove(); var r = a.find("rect"), n = a.find("path"); if (0 === r.length) if (void 0 === n.attr("d")) console.log("undefind attribute d " + t); else { var i = n.attr("d").split(" "), o = Number(i[5].replace("M", "").replace("L", "")) - Number(i[1].replace("M", "").replace("L", "")), s = Number(i[0].replace("M", "").replace("L", "")) - Number(i[2].replace("M", "").replace("L", "")); c = Number(i[2].replace("M", "").replace("L", "")), d = Number(i[1].replace("M", "").replace("L", "")), r = $("<rect>", { x: c, y: d, class: n.attr("class"), width: s, height: o }), a.append(r), n.remove() } var p = a.find("text"); if (0 === p.length) { var l = $("svg > g  g text"), c = Number(r.attr("width")) / 2, d = Number(r.attr("height")) / 2 + Number(r.attr("y")); (p = $("<text>", { x: c, y: d, class: l.attr("class"), "v:langID": l.get(0).getAttribute("v:langID"), "text-anchor": "middle", "dominant-baseline": "middle" })).append(e), a.append(p) } if ("NaN" !== p.attr("y")) { if (c = Number(r.attr("width")) / 2 * Math.sign(p.attr("x")), d = (Number(r.attr("height")) / 2 + Number(r.attr("y"))) * Math.sign(p.attr("y")), p.text(null === e ? "" : e), isNaN(c) || isNaN(d)) i = n.attr("d").split(" "), c = (Number(i[5].replace("M", "").replace("L", "")) - Number(i[1].replace("M", "").replace("L", ""))) / 2, d = (Number(i[0].replace("M", "").replace("L", "")) - Number(i[2].replace("M", "").replace("L", ""))) / 2; p.attr("x", c), p.attr("y", d), p.attr("text-anchor", "middle"), p.attr("dominant-baseline", "middle"), a.html(a.html()) } } var xmldoc, svgtag, viewBox; $(window).on("load", function () { if (toastr.options = { closeButton: !0, debug: !1, newestOnTop: !1, progressBar: !0, positionClass: "toast-top-center", preventDuplicates: !1, onclick: null, showDuration: "300", hideDuration: "1000", timeOut: "3000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut" }, null === (xmldoc = document.getElementById("diagram-element").getSVGDocument())) return toastr.error("등록된 SVG file이 없습니다. 확인 바랍니다."), !0; initialize(), Embed_diagram(xmldoc), Register_toolbox_event(), LoadDiagram(), $("#reload").click(function () { $.getJSON(url, form_load).done(function () { toastr.success("Succeed to refresh", "Diagram Config", { positionClass: "toast-bottom-right" }) }).fail(function () { toastr.error("Failed to refresh", "Diagram Config", { positionClass: "toast-bottom-right" }) }) }), $("#import").click(function (t) { $.getJSON(url, form_load).done(function () { toastr.success("Succeed to import", "Diagram Config", { positionClass: "toast-bottom-right" }) }).fail(function () { toastr.error("Failed to import", "Diagram Config", { positionClass: "toast-bottom-right" }) }) }), $("#update").click(function (t) { form_save(), equipment.dwgEquipId = dwgEquipId, $.ajax({ url: "/DrawingOrders/DiagramConfigSet", method: "POST", data: JSON.stringify(equipment), contentType: "application/json; charset=utf-8", dataType: "json", error: function (t) { toastr.error("Failed to update", "Diagram Config", { positionClass: "toast-bottom-right" }) }, success: function (t) { toastr.success("Succeed to update", "Diagram Config", { positionClass: "toast-bottom-right" }) } }) }), $("#export").click(function (t) { form_save(), $.ajax({ url: '@Url.Action("DiagramConfigExport", "DrawingOrders")', type: "POST", data: JSON.stringify(equipment), contentType: "application/json; charset=utf-8", dataType: "json" }).done(function () { toastr.success("Succeed to export", "Diagram Config", { positionClass: "toast-bottom-right" }) }).fail(function () { toastr.error("Failed to export", "Diagram Config", { positionClass: "toast-bottom-right" }) }) }), $("#ShapeOverlay").on("click", function () { $("#ShapePopup").hide(), $(this).hide() }), $("#ShapePopup").draggit($("#ShapePopup")) }); var isLayerVisible = function (t) { return !!$('#panel-layers input[type="checkbox"][data-index="' + t + '"]').prop("checked") }; function showLayer(t, e) { var a = $($("svg > g > layer").filter(function () { return $(this).attr("v:name") === t })); if (0 !== a.length) { var r = a && a.attr("v:index"); if (0 <= r) { var n = $("svg > g g").filter(function () { return this.getAttribute("v:layerMember") === r }); n && $.each(n, function (t, a) { e ? $(a).attr("style", 'display:""') : $(a).attr("style", "display:none") }) } } } var isEmpty = function (t) { return "" === t || null === t || void 0 === t || null !== t && "object" == typeof t && !Object.keys(t).length };