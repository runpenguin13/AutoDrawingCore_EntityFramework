function initialize() { loading.show(); var t = $("#MenuBar"), a = t.find("ol.breadcrumb"), e = $("<li>", { class: "breadcrumb-item" }); a.append(e); var n = $("<a>", { href: "/DrawingOrders/List", text: "Drawings" }); e.append(n), e = $("<li>", { class: "breadcrumb-item" }), a.append(e), n = $("<a>", { href: "/drawings/orders/" + orderId + "/Edit", text: depth }), e.append(n), e = $("<li>", { class: "breadcrumb-item active", text: model }), a.append(e); var i = t.find("div.btn-group"), r = $("<div>", { class: "btn-group mr-2" }); i.before(r); var s = $("<button>", { id: "BtnEditConfig", type: "button", text: "EDIT", class: "btn btn-primary", value: "Edit" }); r.append(s); var d = $("<div>", { class: "btn-group mr-2" }); r.before(d); var o = $("<a>", { class: "btn text-white font-weight-bold", text: "Component", href: "/drawings/orders/" + orderId + "/equipments/" + dwgEquipId + "/Edit" }); if (d.append(o), isEmpty(wordmapId)) (p = $("<button>", { type: "button", class: "btn text-white", text: "Diagram" })).css("cursor:not-allowed"), p.prop("disabled", !0), d.append(p); else { var p = $("<a>", { class: "btn text-white", text: "Diagram", href: "/drawings/orders/" + orderId + "/equipments/" + dwgEquipId + "/diagram/" + wordmapId + "/row/0" }); d.append(p) } var c = $("<a>", { class: "btn text-white", text: "View", href: "/drawings/orders/" + orderId + "/equipments/" + dwgEquipId + "/fileview" }); d.append(c), loading.hide() } function LoadConfigs(t, a) { loading.show(); var e = $("#Id").val(); $.getJSON("/DrawingOrders/LoadConfigs/", { id: e, action: t }).done(function (e) { if ("Deleted item" === e.Msg) { alert("이미 삭제된 Item입니다. Equipment page로 돌아갑니다."); var n = e.DrawingId; return $(location).attr("href", "/drawings/orders/" + n + "/Edit"), !1 } var i = $("#TbComponents > tbody"); return i.empty(), $.each(e, function (a) { if (0 === this.length) return !0; if ("Diagrams" === a) { var e = $("#DiagramList > div"); e.empty(), $.each(this, function () { e.append($("<a>", { class: "list-group-item", href: "/drawings/orders/" + orderId + "/equipments/" + dwgEquipId + "/diagram/" + this.Id + "/row/0", text: this.Desc })) }) } else { var n = $("<tr>", { class: "cursor-pointer", "data-toggle": "collapse", "data-target": "." + a.replace(/ /g, "") }); i.append(n), n.on("click", function () { var t = $(this).find(".fa"); t.hasClass("fa-caret-up") ? (t.removeClass("fa-caret-up"), t.addClass("fa-caret-down")) : (t.removeClass("fa-caret-down"), t.addClass("fa-caret-up")) }); var r = $("<td>", { colspan: 6 }); n.append(r); var s = $("<label>", { text: a, class: "font-weight-bold mb-0" }); r.append(s); var d = $("<i>", { class: "fa fa-caret-down float-right" }); r.append(d), $.each(this, function () { if ("LoadConfig" === t && 0 === this.Have) return !0; var e = $("<tr>", { class: a.replace(/ /g, "") + " collapse show" }); i.append(e); for (var n = 0; n < 6; n++) { var r = $("<td>"); switch (e.append(r), n) { case 0: var s = $("<input>", { type: "hidden", value: this.VariantId, name: "Id" }); r.append(s); var d = $("<input>", { type: "hidden", name: "ChangeVal" }); if (r.append(d), "LoadComponents" === t) { var o = $("<input>", { type: "checkbox", name: "Items", value: this.VariantId, id: this.VariantId }); r.append(o), o.on("change", function () { var t = $(this).parent().parent(); $(this).prop("checked") ? t.addClass("table-info") : t.removeClass("table-info"), $(this).siblings('input[name="ChangeVal"]').val("E") }), 0 === this.Have ? o.prop("checked", !1) : o.prop("checked", !0), o.trigger("change") } var p = $("<span>", { text: this.VariantName, style: "margin-left: 2rem;" }); r.append(p); break; case 1: var c = $("<span>", { text: this.ProductModel }); r.append(c); break; case 2: if ("LoadComponents" === t) { var l, h = $("<input>", { type: "number", value: this.Qty, class: "form-control inputQty", id: "Qty" + this.VariantId, name: "quantity" }); r.append(h), h.on("change", function () { $(this).parent().parent().find('input[name="ChangeVal"]').val("E") }), "Meter" === this.Unit ? l = $("<span>", { text: " m" }) : "Set" === this.Unit && (l = $("<span>", { text: " set" })), r.append(l) } else l = "Meter" === this.Unit ? $("<span>", { text: this.Qty + " m" }) : "Set" === this.Unit ? $("<span>", { text: this.Qty + " set" }) : $("<span>", { text: this.Qty }), r.append(l); break; case 3: if (!isEmpty(this.Mass)) { var u = $("<span>", { text: this.Mass }); r.append(u) } break; case 4: if (r.prop("style", "min-width:10rem;"), !isEmpty(this.Remark)) { var g = this.Remark.replace(/\r\n|\r|\n/g, "<br/>"); r.append(g) } } } }) } }), "LoadComponents" === t ? $("#AllCheck").attr("hidden", !1) : $("#AllCheck").attr("hidden", !0), null !== a && ("Edit" === a.val() ? (a.val("Save"), a.text("Save"), a.attr("Class", "btn btn-success")) : (a.val("Edit"), a.text("Edit"), a.attr("Class", "btn btn-primary"), toastr.success("Edit component", "Success save", { positionClass: "toast-bottom-right" }))), loading.hide(), !0 }) } $(window).on("load", function () { initialize(), LoadConfigs("LoadConfig", null), $("#BtnEditConfig").click(function () { var t = $(this); if ("Edit" === t.val()) LoadConfigs("LoadComponents", t); else { var a = new Array, e = $('input[name="Items"]'); $.each(e, function () { if ("E" === $(this).siblings('input[name="ChangeVal"]').val()) { var t = $(this).val(), e = { VariantId: t, Checked: $(this).prop("checked"), Qty: $("#Qty" + t).val() }; a.push(e) } }); var n = JSON.stringify(a), i = $("#Id").val(); $.ajax({ type: "POST", url: "/DrawingOrders/EditComponent/", data: { json: n, dwgEquipId: i }, success: function (a) { "Success" === a ? LoadConfigs("LoadConfig", t) : toastr.warning(a, "", { positionClass: "toast-bottom-right" }) } }) } }), $("#TbComponents tbody").delegate("tr", "click", function (t) { if ($(t.target).is("input")) return !0; if ("Save" === $("#BtnEditConfig").val()) { var a = $(t.currentTarget).find('input[type="checkbox"]'); a.prop("checked", !a.prop("checked")), a.trigger("change") } }), $('#TbComponents thead input[type="checkbox"]').on("change", function () { var t = $(this).prop("checked"); $('#TbComponents tbody input[type="checkbox"]').prop("checked", t) }) });