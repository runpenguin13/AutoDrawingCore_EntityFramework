function SelectLJH(t, a) { $.each(t, function () { $(this).hide(), $(this).siblings(".dropdown.custom-file").remove(); var t = $("<div>", { class: "dropdown custom-file" }); t.on("shown.bs.dropdown", function () { $(this).find('input[type="search"]').focus() }), "prepend" === a ? $(this).parent().prepend(t) : $(this).parent().append(t); var e = $("<button>", { class: "btn btn-white dropdown-toggle custom-dropdown-toggle", type: "button", "data-toggle": "dropdown", "aria-haspopup": !0, "aria-expanded": !1, id: "s" + this.id }); e.prop("disabled", $(this).prop("disabled")), t.append(e); var n = $("<div>", { class: "dropdown-menu p-2", "aria-labelledby": "s" + this.id }); t.append(n); var r = $("<input>", { type: "search", class: "form-control" }); r.on("input", function () { var t = this.value; !function (t, a) { var e = t.length; a = a.toLowerCase(); for (var n = 0; n < e; n++)-1 !== t[n].value.toLowerCase().indexOf(a) || -1 !== $(t[n]).text().toLowerCase().indexOf(a) ? $(t[n]).show() : ($(t[n]).hide(), 0) }($(this).siblings("div.items").children(".dropdown-item"), t) }), n.append(r); var o = $("<div>", { class: "items" }); n.append(o); var d = $("<div>", { class: "dropdown-header empty", text: "Not Found" }); n.append(d), $.each(this.options, function () { var t = $("<button>", { type: "button", class: "dropdown-item", value: this.value, text: this.text, title: this.title }); t.on("click", function () { var t = this.value, a = $(this).text(), e = $(this).parent().parent().siblings("button"); e.text(a), e.attr("title", a); var n = e.parent().siblings("select"), r = n.find("option"); $.each(r, function () { this.value === String(t) ? $(this).prop("selected", !0) : $(this).prop("selected", !1) }), n.change() }), o.append(t), d.hide(), $(this).prop("selected") && (this.value === this.text ? e.text(this.value) : e.text(this.text)) }) }) } function ChangeLJH(t) { t.val(); var a = t.find("option:selected").text(), e = t.find("option:selected").prop("title"), n = t.siblings().find(".custom-dropdown-toggle"); n.text(a), n.attr("title", e) } function DatePicker(t) { var a = (t = $(t)).val().split("-"), e = Number(a[0]), n = Number(a[1]), r = Number(a[2]), o = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], d = $("<div>", { class: "input-group-append" }); t.after(d); var s = $("<button>", { class: "btn btn-light" }); d.append(s), s.on("click", function () { var t = $(this).parent().siblings(".under"); t.hasClass("show") ? t.removeClass("show") : t.addClass("show") }); var i = $("<i>", { class: "far fa-calendar-alt" }); s.append(i); var p = $("<div>", { class: "under", type: "month" }); d.after(p); var l = $("<div>", { class: "navigator d-flex justify-content-between" }); p.append(l); var h = $("<button>", { class: "btn btn-light p-1 preMonth" }); l.append(h), h.on("click", function () { var t = $(this).parent().parent(), a = Number($(this).attr("data-year")), e = Number($(this).attr("data-month")), n = t.find(".today").parent().data("day"); LoadMonth(t, new Date(a, e - 1, n)) }); var c = $("<i>", { class: "fas fa-chevron-left fa-xs" }); h.append(c); var u = $("<span>", { class: "calenderTitle" }); l.append(u); var v = $("<button>", { class: "btn btn-light p-1 nextMonth" }); l.append(v), v.on("click", function () { var t = $(this).parent().parent(), a = Number($(this).attr("data-year")), e = Number($(this).attr("data-month")), n = t.find(".today").parent().data("day"); LoadMonth(t, new Date(a, e - 1, n)) }); var g = $("<i>", { class: "fas fa-chevron-right fa-xs" }); v.append(g); var b = $("<table>", { class: "table calenderTable mt-2 mb-0" }); p.append(b); var f = $("<thead>"); b.append(f); var y = $("<tr>"); f.append(y); for (var m = 0; m < 7; m++) { var w = $("<th>", { text: o[m].substr(0, 1) }); 0 === m ? w.css("color", "red") : 6 === m && w.css("color", "blue"), y.append(w) } var D = $("<tbody>"); b.append(D), LoadMonth(p, new Date(e, n - 1, r)) } function LoadMonth(t, a) { t.find(".calenderTitle").text(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][Number(a.getMonth())] + " " + a.getFullYear()); var e = t.find("tbody"); e.empty(); var n = new Date(a.getFullYear(), a.getMonth(), 1), r = n.cal(n.getDay(), !1), o = new Date(a.getFullYear(), a.getMonth(), new Date(a.getFullYear(), a.getMonth(), 0).getDate()); o = o.cal(6 - o.getDay(), !0); for (var d, s = r; s <= o;) { 0 === s.getDay() && (d = $("<tr>"), e.append(d)); var i = $("<td>"); d.append(i), 0 === s.getDay() ? i.css("color", "red") : 6 === s.getDay() && i.css("color", "blue"), i.attr("data-day", s.getDate()), i.attr("data-month", s.getMonth() + 1), i.attr("data-year", s.getFullYear()), i.on("click", function () { var t = $(this), a = pad(t.data("year"), 2) + "-" + pad(t.data("month"), 2) + "-" + pad(t.data("day"), 2); $(this).parent().parent().parent().parent().siblings('input[type="date"]').val(a) }); var p = $("<div>", { text: s.getDate() }); i.append(p), s.getMonth() === a.getMonth() ? s.getFullYear() === a.getFullYear() && s.getMonth() === a.getMonth() && s.getDate() === a.getDate() && p.addClass("today") : p.addClass("other-month"), s = s.cal(1, !0) } var l = t.find(".preMonth"), h = t.find(".nextMonth"); l.attr("data-year", a.cal(30, !1).getFullYear()), l.attr("data-month", a.cal(30, !1).getMonth() + 1), h.attr("data-year", a.cal(30, !0).getFullYear()), h.attr("data-month", a.cal(30, !0).getMonth() + 1) } function pad(t, a) { return (t += "").length >= a ? t : new Array(a - t.length + 1).join("0") + t } Date.prototype.cal = function (t, a) { var e = new Date(this.valueOf()); return a ? e.setDate(e.getDate() + t) : e.setDate(e.getDate() - t), e };