function loadInfo() { var e = $("#DrawingId").val(); $.getJSON("/DrawingOrders/LoadCreateFile", { drawingId: e }).done(function (a) { var t = a.Depth, n = a.OrderId, r = a.Model, o = a.WordMapId, i = a.FileName, s = a.MergeGroup; initialize(t, n, r, e, o, i, s) }).fail(function (e) { console.log(e) }) } function initialize(e, a, t, n, r, o, i) { for (var s = $("#MenuBar"), d = s.find("ol.breadcrumb"), c = 0; c < 3; c++) { var p = $("<li>", { class: "breadcrumb-item" }); switch (d.append(p), c) { case 0: var l = $("<a>", { href: "/DrawingOrders/List", text: "Drawings" }); p.append(l); break; case 1: l = $("<a>", { href: "/drawings/orders/" + a + "/Edit", text: e }); p.append(l); break; case 2: p.addClass("active"), p.text(t) } } var u = s.find("div.btn-group"), f = $("<div>", { class: "btn-group mr-2" }); u.parent().prepend(f), l = $("<a>", { class: "btn text-white", text: "Component", href: "/drawings/orders/" + a + "/equipments/" + n + "/Edit" }), f.append(l), isEmpty(r) ? (btn = $("<button>", { type: "button", class: "btn btn-light-green", text: "Diagram" }), btn.css("cursor:not-allowed"), btn.prop("disabled", !0), f.append(btn)) : (l = $("<a>", { class: "btn text-white", text: "Diagram", href: "/drawings/orders/" + a + "/equipments/" + n + "/diagram/" + r + "/row/0" }), f.append(l)), l = $("<a>", { class: "btn text-white font-weight-bold", text: "View", href: "/drawings/orders/" + a + "/equipments/" + n + "/fileview" }), f.append(l); var h = $("<div>", { class: "float-left" }); f.before(h); var v = $("<button>", { type: "button", text: "Detail", id: "Detail", class: "btn btn-light", "data-toggle": "collapse", "data-target": "#DetailMenu" }); h.append(v); var g = $("<div>", { id: "DetailMenu", class: "dropdown-menu p-3", style: "font-size:.9rem;" }); if (h.append(g), "R1" === i || "R2" === i) { var m = $("<div>", { class: "form-group form-check" }); g.append(m); var w = $("<input>", { type: "checkbox", class: "form-check-input", id: "MergeCheck", name: "mergeCheck" }); w.prop("checked", !0), m.append(w), w.on("change", function () { var e = $(this); $.getJSON("/DrawingOrders/LoadFileName", { drawingId: n, mergeCheck: e.prop("checked") }).done(function (a) { var t = a.FileName, n = a.Path; e.parent().parent().find('input[name="fileName"]').val(t), isEmpty(n) ? $("#Detail").trigger("click") : showPDF(n) }).fail(function (e) { console.log(e) }) }); var b = $("<label>", { class: "form-check-label", for: "MergeCheck", text: "Merge" }); m.append(b) } else $.getJSON("/DrawingOrders/LoadFileName", { drawingId: n, mergeCheck: !1 }).done(function (e) { var a = e.Path; isEmpty(a) ? $("#Detail").trigger("click") : showPDF(a) }).fail(function (e) { console.log(e) }); var k = $("<div>", { class: "form-group input-group", style: "width:40rem;" }); g.append(k); var y = $("<div>", { class: "input-group-prepend" }); k.append(y); var x = $("<span>", { class: "input-group-text", text: "FILE NAME" }); y.append(x); var C = $("<input>", { type: "text", class: "form-control", name: "fileName", value: o }); k.append(C), "R1" !== i && "R2" !== i || $("#MergeCheck").trigger("change"); var I = $("<button>", { type: "button", class: "btn success-color text-white mt-2", id: "tasker" }); g.append(I), I.on("click", function () { $(this).prop("disabled", !0); var e = $('input[name="fileName"]').val(), t = $("#MergeCheck").prop("checked"); $.ajax({ url: "/drawings/orders/" + a + "/equipments/" + n + "/produce?taskId=" + currentTask, type: "POST", cache: !1, data: { fileName: e, mergeCheck: void 0 !== t && t }, success: function (e) { showPDF(e) } }) }); var D = $("<i>", { class: "fas fa-play mr-1" }); I.append(D); var A = $("<span>", { text: "Start Create Drawing" }); I.append(A); var S = $("<div>", { class: "progress" }); g.append(S); var N = $("<div>", { class: "progress-bar progress-bar-striped progress-bar-animated bg-success", role: "progressbar", "aria-valuenow": "0", "aria-valuemin": "0", "aria-valuemax": "100" }); S.append(N); var P = $("<span>", { class: "sr-only", id: "WorkDone" }); N.append(P), $.ajax("/DrawingOrders/CheckServiceItem", { data: { dwgEquipId: n } }).done(function (e) { if ("1" === e) alert("삭제된 Equipment입니다. Equipment page로 이동합니다."), $(location).attr("href", "/drawings/orders/" + a + "/Edit"); else { var t = $.connection.progressHub; t.client.initProgressBar = function (e) { $("#workDone").text("0"), $(".progress-bar").css("width", "0%").attr("aria-valuenow", "0") }, t.client.updateProgressBar = function (e, a) { e == currentTask && ($("#workDone").text(a), $(".progress-bar").css("width", a + "%").attr("aria-valuenow", a)) }, t.client.notifyProduce = function (e, a, t, n) { a ? (console.log(t), "PDF" === t.substring(t.length - 3, t.length).toUpperCase() && showPDF(n)) : console.log("failed to produce drawing") }, t.client.clearProgressBar = function (e) { $("#WorkDone").text("completed"), $(".progress-bar").css("width", "100%").attr("aria-valuenow", "100"), $("#tasker").removeAttr("disabled"), $("#DetailMenu").collapse("hide"), toastr.success("Success Create") }, $.connection.hub.start().done(function () { currentTask = $.connection.hub.id, $("#tasker").removeAttr("disabled") }), loading.hide() } }) } function htmlEncode(e) { return $("<div />").text(e).html() } function showPDF(e) { var a = document.getElementById("viewer"); $(a).empty(); var t = new PDFTron.WebViewer({ path: "/lib/WebViewer/lib", type: "html5", l: "demo:ycjung@kjeng.kr:721d08bd01901fed604df95c446daa7994f1b1ef80033a9e9f", documentType: "pdf", initialDoc: e }, a), n = new Server; $(a).on("documentLoaded", function () { t.getInstance().showNotesPanel(!0); var e = t.getInstance().docViewer.getAnnotationManager(), a = null; function r(a) { var n = e.importAnnotCommand(a.val().xfdf)[0]; n.authorId = a.val().authorId, e.redrawAnnotation(n), t.getInstance().fireEvent("updateAnnotationPermission", [n]) } function o(a) { var t = e.importAnnotCommand(a.val().xfdf)[0]; t.authorId = a.val().authorId, e.redrawAnnotation(t) } function i(a) { var t = "<delete><id>" + a.key + "</id></delete>"; e.importAnnotCommand(t) } function s(a) { e.setCurrentUser(a), $(".returning-author .name").html(a), $(".returning-author").css("display", "block").click(function (e) { e.stopPropagation() }), $(".popup-container").click(function () { $(".popup-container").css("display", "none") }), $(".popup-container").keypress(function (e) { 13 === e.which && $(".popup-container").css("display", "none") }) } function d() { $(".new-author").css("display", "block"), $(".new-author .button").click(function () { var e = $(".new-author .name").get(0).value.trim(); e && c(e) }), $(".popup-container").keypress(function (e) { var a = $(".new-author .name").get(0).value.trim(); 13 === e.which && a && c(a) }) } function c(t) { e.setCurrentUser(t), n.updateAuthor(a, { authorName: t }), $(".popup-container").css("display", "none") } n.bind("onAuthStateChanged", function (e) { e ? (a = e.uid, n.checkAuthor(a, s, d), n.bind("onAnnotationCreated", r), n.bind("onAnnotationUpdated", o), n.bind("onAnnotationDeleted", i)) : n.signInAnonymously() }), e.on("annotationChanged", function (t, r, o) { t.imported || r.forEach(function (t) { var r = null, i = e.getAnnotCommand(); "add" === o ? (t.InReplyTo && (r = e.getAnnotationById(t.InReplyTo).authorId || "default"), n.createAnnotation(t.Id, { authorId: a, parentAuthorId: r, xfdf: i })) : "modify" === o ? (t.InReplyTo && (r = e.getAnnotationById(t.InReplyTo).authorId || "default"), n.updateAnnotation(t.Id, { authorId: a, parentAuthorId: r, xfdf: i })) : "delete" === o && n.deleteAnnotation(t.Id) }) }), e.setPermissionCheckCallback(function (e, t) { return t.authorId === a }) }) } function SearchService(e) { var a = $(e).parent().siblings('input[type="text"]').val(), t = new Array, n = $('#SearchBox input[type="checkbox"]:checked'); $.each(n, function () { var e = $(this).parent().parent().siblings().find("select, input"); $.each(e, function () { var e = { name: $(this).prop("name"), value: $(this).val() }; t.push(e) }) }); var r = { Word: a, Options: t }; $.getJSON("/DrawingOrders/SearchService", { json: JSON.stringify(r) }).done(function (e) { var a = $("#SearchResult"); a.empty(), a.css("font-size", ".9rem"); $.each(e, function () { this.YardId; var e = this.Code, t = this.Name, n = this.arrVessel, r = $("<div>", { class: "ml-3 mt-3 mr-3" }); a.append(r), 1; var o = $("<div>", { class: "card-header special-color text-white rounded cursor-pointer" }); r.append(o), o.on("click", function () { var e = $(this).find(".fas"), a = $(this).siblings(); e.hasClass("fas fa-caret-down") ? (e.removeClass("fas fa-caret-down"), e.addClass("fas fa-caret-up"), a.hide()) : (e.removeClass("fas fa-caret-up"), e.addClass("fas fa-caret-down"), a.show()) }); var i = $("<i>", { class: "fas fa-caret-down mr-3" }); o.append(i); var s = $("<span>", { text: e, class: "mr-3" }); o.append(s); var d = $("<span>", { text: "(" + t + ")" }); s.after(d); var c = $("<div>"); r.append(c), $.each(n, function () { var e = this.HullCode, a = this.SalesNo, t = this.arrDrawingType, n = $("<div>"); c.append(n); var r = $("<div>", { class: "card-header special-color text-white rounded ml-3 cursor-pointer" }); n.append(r), r.on("click", function () { var e = $(this).find(".fas"), a = $(this).siblings(); e.hasClass("fas fa-caret-down") ? (e.removeClass("fas fa-caret-down"), e.addClass("fas fa-caret-up"), a.hide()) : (e.removeClass("fas fa-caret-up"), e.addClass("fas fa-caret-down"), a.show()) }); var o = $("<i>", { class: "fas fa-caret-down mr-3" }); r.append(o); var i = $("<span>", { text: e, class: "mr-3" }); r.append(i); var s = $("<span>", { text: "(" + a + ")" }); i.after(s); var d = $("<div>", { class: "ml-3" }); n.append(d), $.each(t, function () { this.ServiceType; var e = this.CodeName, a = this.arrService, t = $("<div>"); d.append(t); var n = $("<div>", { class: "card-header special-color text-white rounded ml-3 cursor-pointer" }); t.append(n), n.on("click", function () { var e = $(this).find(".fas"), a = $(this).siblings(); e.hasClass("fas fa-caret-down") ? (e.removeClass("fas fa-caret-down"), e.addClass("fas fa-caret-up"), a.hide()) : (e.removeClass("fas fa-caret-up"), e.addClass("fas fa-caret-down"), a.show()) }); var r = $("<i>", { class: "fas fa-caret-down mr-3" }); n.append(r); var o = $("<span>", { text: e }); n.append(o); var i = $("<div>", { class: "ml-3" }); t.append(i), $.each(a, function () { var e = this.Id, a = this.Version, t = this.State, n = this.RequestDate, r = $("<div>", { class: "card-header rounded ml-3 cursor-pointer", text: a }); if (i.append(r), r.on("click", function () { MovePage_Order($(this).find('input[type="hidden"]').val(), "ServiceIdx") }), "70" !== t) { var o = $("<span>", { class: "badge float-right badge-pill badge-danger", text: "Not completed" }); r.append(o) } var s = $("<span>", { class: "ml-5", text: "Request Date : " + n }); r.append(s); var d = $("<input>", { type: "hidden", value: e }); r.append(d) }) }) }) }) }).fail(function (e) { console.log(e) }) } function MovePage_Order(e, a) { $.getJSON("/DrawingOrders/FindOrderId", { id: e, type: a }).done(function (e) { if (0 === e) toastr.error("등록된 Service가 없습니다."); else { var a = "/drawings/orders/" + e + "/Edit/"; location.href = a } }) } $(window).on("load", function () { loadInfo() });